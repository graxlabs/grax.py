# coding: utf-8

"""
    GRAX API

    This documents the APIs available in your GRAX backend.  ### Authentication  Generate an API token to authenticate requests from your backend, going to Settings > API Tokens > New Token.  Then supply it with HTTP requests in the `Authorization` header, like:  ``` Authorization: Bearer grax_token_xyz ``` 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RecordCount(BaseModel):
    """
    RecordCount
    """ # noqa: E501
    created: Optional[StrictInt] = Field(default=None, description="Count of records created. Only applies to records with a CreatedDate field.")
    deleted_by_grax: Optional[StrictInt] = Field(default=None, description="Count of records archived with GRAX.", alias="deletedByGrax")
    deleted_by_source: Optional[StrictInt] = Field(default=None, description="Count of records deleted directly in Salesforce.", alias="deletedBySource")
    group: Optional[datetime] = Field(default=None, description="Timestamp corresponding to the beginning of the group (hour, day, month or year), if any.")
    modified: Optional[StrictInt] = Field(default=None, description="Count of records modified; Does not consider records created and then modified in the group.")
    object: Optional[StrictStr] = Field(default=None, description="The object name; empty when representing all objects.")
    __properties: ClassVar[List[str]] = ["created", "deletedByGrax", "deletedBySource", "group", "modified", "object"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecordCount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecordCount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "deletedByGrax": obj.get("deletedByGrax"),
            "deletedBySource": obj.get("deletedBySource"),
            "group": obj.get("group"),
            "modified": obj.get("modified"),
            "object": obj.get("object")
        })
        return _obj


