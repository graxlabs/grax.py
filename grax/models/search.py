# coding: utf-8

"""
    GRAX API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from grax.models.search_filters import SearchFilters
from grax.models.search_limits import SearchLimits
from typing import Optional, Set
from typing_extensions import Self

class Search(BaseModel):
    """
    Search
    """ # noqa: E501
    created: Optional[datetime] = Field(default=None, description="Time the search job was created.")
    deleting: Optional[datetime] = Field(default=None, description="Time the search will be automatically deleted if its results are not accessed.")
    filter_status: Optional[StrictStr] = Field(default=None, description="Status of the records to search.", alias="filterStatus")
    filters: Optional[SearchFilters] = None
    id: Optional[StrictStr] = Field(default=None, description="ID of the search job.")
    limits: Optional[SearchLimits] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the search job.")
    object: Optional[StrictStr] = Field(default=None, description="Object searched.")
    progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Progress of the search job.")
    records_found: Optional[StrictInt] = Field(default=None, description="Number of records found.", alias="recordsFound")
    records_scanned: Optional[StrictInt] = Field(default=None, description="Number of records scanned.", alias="recordsScanned")
    records_time_first: Optional[datetime] = Field(default=None, description="Time of the first found record.", alias="recordsTimeFirst")
    records_time_last: Optional[datetime] = Field(default=None, description="Time of the last found record.", alias="recordsTimeLast")
    reverse: Optional[StrictBool] = Field(default=None, description="Whether records were searched in reverse order.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the search job.")
    time_field: Optional[StrictStr] = Field(default=None, description="Time field used for the search. Can be 'createdAt', 'modifiedAt', 'latestModifiedAt', 'rangeLatestModifiedAt', 'allModifiedAt', 'deletedAt' or 'purgedAt'.", alias="timeField")
    time_field_max: Optional[datetime] = Field(default=None, description="Maximum time for the search.", alias="timeFieldMax")
    time_field_min: Optional[datetime] = Field(default=None, description="Minimum time for the search.", alias="timeFieldMin")
    updated: Optional[datetime] = Field(default=None, description="Time the search job was last updated.")
    __properties: ClassVar[List[str]] = ["created", "deleting", "filterStatus", "filters", "id", "limits", "name", "object", "progress", "recordsFound", "recordsScanned", "recordsTimeFirst", "recordsTimeLast", "reverse", "status", "timeField", "timeFieldMax", "timeFieldMin", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Search from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limits
        if self.limits:
            _dict['limits'] = self.limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Search from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "deleting": obj.get("deleting"),
            "filterStatus": obj.get("filterStatus"),
            "filters": SearchFilters.from_dict(obj["filters"]) if obj.get("filters") is not None else None,
            "id": obj.get("id"),
            "limits": SearchLimits.from_dict(obj["limits"]) if obj.get("limits") is not None else None,
            "name": obj.get("name"),
            "object": obj.get("object"),
            "progress": obj.get("progress"),
            "recordsFound": obj.get("recordsFound"),
            "recordsScanned": obj.get("recordsScanned"),
            "recordsTimeFirst": obj.get("recordsTimeFirst"),
            "recordsTimeLast": obj.get("recordsTimeLast"),
            "reverse": obj.get("reverse"),
            "status": obj.get("status"),
            "timeField": obj.get("timeField"),
            "timeFieldMax": obj.get("timeFieldMax"),
            "timeFieldMin": obj.get("timeFieldMin"),
            "updated": obj.get("updated")
        })
        return _obj


