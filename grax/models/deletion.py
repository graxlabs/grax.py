# coding: utf-8

"""
    GRAX API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from grax.models.deletion_caller import DeletionCaller
from typing import Optional, Set
from typing_extensions import Self

class Deletion(BaseModel):
    """
    Deletion
    """ # noqa: E501
    caller: Optional[DeletionCaller] = None
    cascade: Optional[StrictBool] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    force_cascade_objects: Optional[List[StrictStr]] = Field(default=None, alias="forceCascadeObjects")
    id: Optional[StrictStr] = None
    object: Optional[StrictStr] = None
    skip_deleted_check: Optional[StrictBool] = Field(default=None, alias="skipDeletedCheck")
    __properties: ClassVar[List[str]] = ["caller", "cascade", "createdAt", "forceCascadeObjects", "id", "object", "skipDeletedCheck"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Deletion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of caller
        if self.caller:
            _dict['caller'] = self.caller.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Deletion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caller": DeletionCaller.from_dict(obj["caller"]) if obj.get("caller") is not None else None,
            "cascade": obj.get("cascade"),
            "createdAt": obj.get("createdAt"),
            "forceCascadeObjects": obj.get("forceCascadeObjects"),
            "id": obj.get("id"),
            "object": obj.get("object"),
            "skipDeletedCheck": obj.get("skipDeletedCheck")
        })
        return _obj


