# coding: utf-8

"""
    GRAX API

    This documents the APIs available in your GRAX backend.  ### Authentication  Generate an API token to authenticate requests from your backend, going to Settings > API Tokens > New Token.  Then supply it with HTTP requests in the `Authorization` header, like:  ``` Authorization: Bearer grax_token_xyz ``` 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from grax.models.deletion import Deletion
from grax.models.deletion_records_page import DeletionRecordsPage
from grax.models.deletions_page import DeletionsPage

from grax.api_client import ApiClient, RequestSerialized
from grax.api_response import ApiResponse
from grax.rest import RESTResponseType


class DeleteForeverApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def deletion_get(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        id: Annotated[StrictStr, Field(description="Deletion ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Deletion:
        """Get Delete Forever deletion


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param id: Deletion ID. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletion_get_serialize(
            org_id=org_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Deletion",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def deletion_get_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        id: Annotated[StrictStr, Field(description="Deletion ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Deletion]:
        """Get Delete Forever deletion


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param id: Deletion ID. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletion_get_serialize(
            org_id=org_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Deletion",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def deletion_get_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        id: Annotated[StrictStr, Field(description="Deletion ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Delete Forever deletion


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param id: Deletion ID. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletion_get_serialize(
            org_id=org_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Deletion",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _deletion_get_serialize(
        self,
        org_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['orgID'] = org_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/salesforce/{orgID}/deletions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def deletion_records_list(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        id: Annotated[StrictStr, Field(description="Deletion ID.")],
        page_size: Annotated[Optional[StrictInt], Field(description="Maximum number of results to return per page. Fewer or zero may be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeletionRecordsPage:
        """List Delete Forever deletion records


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param id: Deletion ID. (required)
        :type id: str
        :param page_size: Maximum number of results to return per page. Fewer or zero may be returned.
        :type page_size: int
        :param page_token: Token returned by previous call to retrieve the subsequent page.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletion_records_list_serialize(
            org_id=org_id,
            id=id,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeletionRecordsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def deletion_records_list_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        id: Annotated[StrictStr, Field(description="Deletion ID.")],
        page_size: Annotated[Optional[StrictInt], Field(description="Maximum number of results to return per page. Fewer or zero may be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeletionRecordsPage]:
        """List Delete Forever deletion records


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param id: Deletion ID. (required)
        :type id: str
        :param page_size: Maximum number of results to return per page. Fewer or zero may be returned.
        :type page_size: int
        :param page_token: Token returned by previous call to retrieve the subsequent page.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletion_records_list_serialize(
            org_id=org_id,
            id=id,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeletionRecordsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def deletion_records_list_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        id: Annotated[StrictStr, Field(description="Deletion ID.")],
        page_size: Annotated[Optional[StrictInt], Field(description="Maximum number of results to return per page. Fewer or zero may be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Delete Forever deletion records


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param id: Deletion ID. (required)
        :type id: str
        :param page_size: Maximum number of results to return per page. Fewer or zero may be returned.
        :type page_size: int
        :param page_token: Token returned by previous call to retrieve the subsequent page.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletion_records_list_serialize(
            org_id=org_id,
            id=id,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeletionRecordsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _deletion_records_list_serialize(
        self,
        org_id,
        id,
        page_size,
        page_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['orgID'] = org_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/salesforce/{orgID}/deletions/{id}/records',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def deletions_list(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        min: Annotated[Optional[datetime], Field(description="Minimum created time, inclusive.")] = None,
        max: Annotated[Optional[datetime], Field(description="Maximum created time, exclusive.")] = None,
        object: Annotated[Optional[StrictStr], Field(description="Object name. If provided, only deletions for this object will be returned.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Maximum number of results to return per page. Fewer or zero may be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeletionsPage:
        """List Delete Forever deletions


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param min: Minimum created time, inclusive.
        :type min: datetime
        :param max: Maximum created time, exclusive.
        :type max: datetime
        :param object: Object name. If provided, only deletions for this object will be returned.
        :type object: str
        :param page_size: Maximum number of results to return per page. Fewer or zero may be returned.
        :type page_size: int
        :param page_token: Token returned by previous call to retrieve the subsequent page.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletions_list_serialize(
            org_id=org_id,
            min=min,
            max=max,
            object=object,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeletionsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def deletions_list_with_http_info(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        min: Annotated[Optional[datetime], Field(description="Minimum created time, inclusive.")] = None,
        max: Annotated[Optional[datetime], Field(description="Maximum created time, exclusive.")] = None,
        object: Annotated[Optional[StrictStr], Field(description="Object name. If provided, only deletions for this object will be returned.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Maximum number of results to return per page. Fewer or zero may be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeletionsPage]:
        """List Delete Forever deletions


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param min: Minimum created time, inclusive.
        :type min: datetime
        :param max: Maximum created time, exclusive.
        :type max: datetime
        :param object: Object name. If provided, only deletions for this object will be returned.
        :type object: str
        :param page_size: Maximum number of results to return per page. Fewer or zero may be returned.
        :type page_size: int
        :param page_token: Token returned by previous call to retrieve the subsequent page.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletions_list_serialize(
            org_id=org_id,
            min=min,
            max=max,
            object=object,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeletionsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def deletions_list_without_preload_content(
        self,
        org_id: Annotated[StrictStr, Field(description="Organization ID. Can be 'fromAuth' to infer from authenticated user.")],
        min: Annotated[Optional[datetime], Field(description="Minimum created time, inclusive.")] = None,
        max: Annotated[Optional[datetime], Field(description="Maximum created time, exclusive.")] = None,
        object: Annotated[Optional[StrictStr], Field(description="Object name. If provided, only deletions for this object will be returned.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Maximum number of results to return per page. Fewer or zero may be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Delete Forever deletions


        :param org_id: Organization ID. Can be 'fromAuth' to infer from authenticated user. (required)
        :type org_id: str
        :param min: Minimum created time, inclusive.
        :type min: datetime
        :param max: Maximum created time, exclusive.
        :type max: datetime
        :param object: Object name. If provided, only deletions for this object will be returned.
        :type object: str
        :param page_size: Maximum number of results to return per page. Fewer or zero may be returned.
        :type page_size: int
        :param page_token: Token returned by previous call to retrieve the subsequent page.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletions_list_serialize(
            org_id=org_id,
            min=min,
            max=max,
            object=object,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeletionsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _deletions_list_serialize(
        self,
        org_id,
        min,
        max,
        object,
        page_size,
        page_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if org_id is not None:
            _path_params['orgID'] = org_id
        # process the query parameters
        if min is not None:
            if isinstance(min, datetime):
                _query_params.append(
                    (
                        'min',
                        min.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('min', min))
            
        if max is not None:
            if isinstance(max, datetime):
                _query_params.append(
                    (
                        'max',
                        max.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('max', max))
            
        if object is not None:
            
            _query_params.append(('object', object))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/salesforce/{orgID}/deletions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


